import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchResponses } from '../Redux/Actions'; // Importación de la acción

import './ChatBot.css';

const Chatbot = () => {
  const responses = useSelector((state) => state.responses);
  const dispatch = useDispatch(); // Crear una instancia de useDispatch
  const [userInput, setUserInput] = useState('');
  const [conversation, setConversation] = useState([]);

  useEffect(() => {
    if (responses.length > 0) {
      const lastResponse = responses[responses.length - 1];
      setConversation((prevConversation) => [...prevConversation, { type: 'bot', message: lastResponse.respuesta }]);
    }
  }, [responses]);

  const handleInputChange = (event) => {
    setUserInput(event.target.value);
  };

  const handleSendClick = async () => {
    const userMessage = userInput;
    setConversation((prevConversation) => [...prevConversation, { type: 'user', message: userMessage }]);
  
    try {
      const response = await dispatch(fetchResponses(userInput));
      console.log('Response:', response);
  
      if (response) {
        const flowPrincipal = response.flowPrincipal;
        console.log('Flow Principal:', flowPrincipal);
  
        if (flowPrincipal && flowPrincipal.response) {
          const botResponse = flowPrincipal.response;
          console.log('Bot Response:', botResponse);
  
          setConversation((prevConversation) => [...prevConversation, { type: 'bot', message: botResponse }]);
          console.log('Conversation:', conversation); // Add this line to check the conversation state
        }
      } else {
        console.error('Error fetching responses:', response);
      }
    } catch (error) {
      console.error('Error fetching responses:', error);
    }
  };
  return (
    <div className="chatbot-container">
      <div className="chatbot-header">
        <img
          src={require('./logo astrea 5.png')}
          alt="Logo del chatbot"
          className="chatbot-profile"
        />
        <div className="chatbot-conversation" id="conversation-container">
          <div className="chatbot-messages">
            {conversation.map((message, index) => (
              <div key={index} className={`chatbot-message ${message.type === 'bot' ? 'bot-message' : 'user-message'}`}>
                <label>{message.type === 'bot' ? 'Bot:' : 'You:'}</label>
                <p>{message.message}</p>
              </div>
            ))}
          </div>
          <input
            type="text"
            id="user-input"
            value={userInput}
            onChange={handleInputChange}
            placeholder="Escribe un mensaje..."
          />
          <button id="chatbot-send-button" onClick={handleSendClick}>
            Enviar
          </button>
        </div>
      </div>
      </div>
      );
      };


export default Chatbot;